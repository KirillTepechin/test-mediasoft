{
	"info": {
		"_postman_id": "2c2eab18-9bca-4934-b521-952c0cb96a6f",
		"name": "warehouse",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24170952"
	},
	"item": [
		{
			"name": "Create product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.price).to.be.a('number');\r",
							"  pm.expect(responseData.price).to.be.at.least(0, \"Price should be a non-negative number\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Quantity is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.quantity).to.exist;\r",
							"    pm.expect(responseData.quantity).to.be.a('number');\r",
							"    pm.expect(responseData.quantity).to.satisfy((quantity) => quantity >= 0, \"Quantity must be a non-negative integer\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"UUID should not be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.uuid).to.exist.and.to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Description is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.category).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"CreatedDate should not be empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.createdDate).to.exist.and.to.not.be.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Новый товар\",\r\n  \"description\": \"Описание нового товара\",\r\n  \"category\": \"FOOD\",\r\n  \"price\": 1,\r\n  \"quantity\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/product",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"product"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(product) {\r",
							"        pm.expect(product.price).to.be.a('number').and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Quantity is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.forEach(function(product) {\r",
							"    pm.expect(product.quantity).to.be.a('number');\r",
							"    pm.expect(product.quantity).to.be.at.least(0, \"Quantity should be a non-negative integer\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the uuid field is not empty for each product\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(product) {\r",
							"        pm.expect(product.uuid).to.exist.and.to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Description is a non-empty string for each product\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(product) {\r",
							"        pm.expect(product.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category is a non-empty string for each product\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    responseData.forEach(function(product) {\r",
							"        pm.expect(product.category).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category should not be empty\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/product",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"product"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price should be a non-negative number\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.price).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Quantity is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.quantity).to.exist;\r",
							"  pm.expect(responseData.quantity).to.be.a('number');\r",
							"  pm.expect(responseData.quantity).to.be.at.least(0);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/product/81c7e846-74a4-4e8a-aae5-a426cdb79649",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"product",
						"81c7e846-74a4-4e8a-aae5-a426cdb79649"
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.include.all.keys('uuid', 'name', 'description', 'category', 'price', 'quantity', 'lastQuantityChangeDate', 'createdDate');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Price is a non-negative number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.price).to.be.a('number');\r",
							"    pm.expect(responseData.price).to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Quantity is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.quantity).to.be.a('number');\r",
							"    pm.expect(responseData.quantity).to.be.at.least(0, \"Quantity should be a non-negative integer\");\r",
							"});\r",
							"\r",
							"pm.test(\"Change lastQuantityChangeDate after change quantity\", function () {\r",
							"    // Получить текущую дату изменения количества\r",
							"    var initialQuantityChangeDate = pm.response.json().lastQuantityChangeDate;\r",
							"\r",
							"    // Изменить количество продукта\r",
							"    pm.request.body.raw = JSON.stringify({\r",
							"        quantity: 10\r",
							"    });\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"apiUrl\") + \"/products/\" + pm.environment.get(\"productId\"),\r",
							"        method: \"PATCH\"\r",
							"    });\r",
							"\r",
							"    // Проверить, что дата изменения количества изменилась\r",
							"    pm.test(\"Last Quantity Change Date Changed\", function () {\r",
							"        var newQuantityChangeDate = pm.response.json().lastQuantityChangeDate.stringify;\r",
							"        pm.expect(newQuantityChangeDate).not.to.equal(initialQuantityChangeDate);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"quantity\": 12\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/product/81c7e846-74a4-4e8a-aae5-a426cdb79649",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"product",
						"81c7e846-74a4-4e8a-aae5-a426cdb79649"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response body is null\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate that the product with ID '2149bc2d-5715-43e7-9295-820142e8b60b' has been successfully deleted\", function () {\r",
							"    const responseData = xml2Json(pm.response.text());\r",
							"    \r",
							"    pm.expect(responseData).to.be.null;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/product/81c7e846-74a4-4e8a-aae5-a426cdb79649",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"product",
						"81c7e846-74a4-4e8a-aae5-a426cdb79649"
					]
				}
			},
			"response": []
		}
	]
}